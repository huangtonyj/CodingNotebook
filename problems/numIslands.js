// ***
/*
  Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), 
  return the number of islands.

  An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
  You may assume all four edges of the grid are all surrounded by water.

  Example 1:
  Input: grid = [
    ["1","1","1","1","0"],
    ["1","1","0","1","0"],
    ["1","1","0","0","0"],
    ["0","0","0","0","0"]
  ]
  Output: 1

  Example 2:
  Input: grid = [
    ["1","1","0","0","0"],
    ["1","1","0","0","0"],
    ["0","0","1","0","0"],
    ["0","0","0","1","1"]
  ]
  Output: 3
*/

function numIslands(grid) {
  const rowCount = grid.length;
  const colCount = grid[0].length;
  let islandCount = 0;

  for (let r = 0; r < rowCount; r++) {
    for (let c = 0; c < colCount; c++) {
      const isLand = grid[r][c] === '1';
    
      if (isLand) {
        islandCount++;
        _markIslandVisited(grid, r, c);
      }
    }
  } 

  return islandCount;
}

function _markIslandVisited(grid, startR, startC) {
  const queue = [[startR, startC]];
  
  while (queue.length) {
    const [r, c] = queue.shift();
    grid[r][c] = 'visited';

    _queueUnvisitedLandNeighbors(grid, r, c, queue);
  }
}

function _queueUnvisitedLandNeighbors(grid, r, c, queue) {  
  // North
  if (grid[r-1] && grid[r-1][c] === '1') {
    grid[r-1][c] = 'queued'; // Mark queued to avoiding queueing again from another BFS.
    queue.push([r-1, c]);
  }
    
  // South
  if (grid[r+1] && grid[r+1][c] === '1') {
    grid[r+1][c] = 'queued';
    queue.push([r+1, c]);
  }
    
  // East
  if (grid[r] && grid[r][c+1] === '1') {
    grid[r][c+1] = 'queued';
    queue.push([r, c+1]);
  }
    
  // West
  if (grid[r] && grid[r][c-1] === '1') {
    grid[r][c-1] = 'queued';
    queue.push([r, c-1]);
  }
}

// numIslands([
//   ['1','1','0','0','0'],
//   ['1','1','0','0','0'],
//   ['0','0','1','0','0'],
//   ['0','0','0','1','1']
// ]); // 3

// numIslands([
//   ['1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'],
//   ['0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'],
//   ['1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'],
//   ['1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
//   ['1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
//   ['1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'],
//   ['0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'],
//   ['1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
//   ['0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
//   ['1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'],
//   ['1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
//   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1']
// ]); // 1